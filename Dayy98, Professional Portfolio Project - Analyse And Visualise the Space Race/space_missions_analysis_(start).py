# -*- coding: utf-8 -*-
"""Space_Missions_Analysis_(start).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cp1z0gyuK-i0E0JsJoSG_K7a7HRdMVwG

# Introduction

<center><img src="https://i.imgur.com/9hLRsjZ.jpg" height=400></center>

This dataset was scraped from [nextspaceflight.com](https://nextspaceflight.com/launches/past/?page=1) and includes all the space missions since the beginning of Space Race between the USA and the Soviet Union in 1957!

### Install Package with Country Codes
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install iso3166

"""### Upgrade Plotly

Run the cell below if you are working with Google Colab.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade plotly

"""### Import Statements"""

import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# These might be helpful:
from iso3166 import countries
from datetime import datetime, timedelta

"""### Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

"""### Load the Data"""

df_data = pd.read_csv('mission_launches.csv')

"""# Preliminary Data Exploration

* What is the shape of `df_data`? 
* How many rows and columns does it have?
* What are the column names?
* Are there any NaN values or duplicates?
"""

df_data.shape

print("value of count: " , df_data.shape[0])
print("value of row: ", df_data.shape[1])

df_data.columns

df_data.isna().values.any()

"""## Data Cleaning - Check for Missing Values and Duplicates

Consider removing columns containing junk data. 
"""

df_data = df_data.dropna()

df_data.duplicated().any()

"""## Descriptive Statistics"""

df_data.info()

"""# Number of Launches per Company

Create a chart that shows the number of space mission launches by organisation.
"""

org_values = df_data.Organisation.value_counts()

org_values = org_values.iloc[15::-1]

colorful_bar = px.bar(x=org_values.values, y=org_values.index, color=org_values.values, color_continuous_scale="balance")
colorful_bar.update_layout(xaxis_title="Values", yaxis_title="Companies", title="Number of space mission launches by organisation", coloraxis_showscale=False)
colorful_bar.show()

"""# Number of Active versus Retired Rockets

How many rockets are active compared to those that are decomissioned? 
"""

aktive_rockets = df_data.Rocket_Status.value_counts().StatusActive
passive_rocket = df_data.Rocket_Status.value_counts().StatusRetired

print("Aktive Rockets: ", aktive_rockets)
print("Passive Rockets: ", passive_rocket)

"""# Distribution of Mission Status

How many missions were successful?
How many missions failed?
"""

success_missions = df_data.Mission_Status.value_counts().Success
failure_missions = df_data.Mission_Status.value_counts().Failure

print("Number of success missions: ", success_missions)
print("Number of failure missions: ", failure_missions)

"""# How Expensive are the Launches? 

Create a histogram and visualise the distribution. The price column is given in USD millions (careful of missing values). 
"""







"""# Use a Choropleth Map to Show the Number of Launches by Country

* Create a choropleth map using [the plotly documentation](https://plotly.com/python/choropleth-maps/)
* Experiment with [plotly's available colours](https://plotly.com/python/builtin-colorscales/). I quite like the sequential colour `matter` on this map. 
* You'll need to extract a `country` feature as well as change the country names that no longer exist.

Wrangle the Country Names

You'll need to use a 3 letter country code for each country. You might have to change some country names.

* Russia is the Russian Federation
* New Mexico should be USA
* Yellow Sea refers to China
* Shahrud Missile Test Site should be Iran
* Pacific Missile Range Facility should be USA
* Barents Sea should be Russian Federation
* Gran Canaria should be USA


You can use the iso3166 package to convert the country names to Alpha3 format.
"""

all_countries = []
for i in df_data.Location:
  xx = i.split(",")[-1].lstrip()
  if xx == "Russia":
    all_countries.append("RUS")
  elif xx == "China" or xx == "Yellow Sea":
    all_countries.append("CHN")
  elif xx == "India":
    all_countries.append("IND")
  elif xx == "France":
    all_countries.append("FRA")
  elif xx == "Japan":
    all_countries.append("JPN")
  elif xx == "Kazakhstan":
    all_countries.append("KAZ")
  elif xx == "Pacific Missile Range Facility" or xx == "Gran Canaria":
    all_countries.append("USA")
  elif xx == "New Zealand":
    all_countries.append("NZL")
  else:
    all_countries.append("USA")

df_data["CountryCodes"] = all_countries
df_data[["Location", "CountryCodes"]]

numberOfLaunches = df_data.CountryCodes.value_counts()
numberOfLaunches

df = px.choropleth(locations=numberOfLaunches.index, color=numberOfLaunches.values,
                   labels={"color": "Color of counts"}, title="Number Of Total Launches")
df.show()

"""# Use a Choropleth Map to Show the Number of Failures by Country

"""

numberOfFailure = df_data[df_data["Mission_Status"] == "Failure"].CountryCodes.value_counts()
numberOfFailure

df = px.choropleth(locations=numberOfFailure.index, color=numberOfFailure.values, title="Number of Fail Launches", labels={"color":"Color of counts"})
df.show()

"""# Create a Plotly Sunburst Chart of the countries, organisations, and mission status. """

sunburst_data = df_data.groupby(by=["CountryCodes","Organisation","Mission_Status"], as_index=False).agg({"Mission_Status":pd.Series.count})
sunburst_data

fig = px.sunburst(sunburst_data, path=["CountryCodes","Organisation","Mission_Status"], values="Mission_Status",labels=["Success","Failure","Prelaunch Failure", "Partial Failure"])
fig.show()

"""# Analyse the Total Amount of Money Spent by Organisation on Space Missions"""

new_df = pd.DataFrame(df_data, columns=["Organisation","Price"])
new_df["Price"] = new_df["Price"].replace(",", "", regex=True)
new_df["Price"] = new_df["Price"].astype(float)
new_df.sort_values(by="Price", ascending=True)

totalPrices = new_df.groupby(["Organisation"]).agg({"Price":pd.Series.sum})
totalPrices

"""# Analyse the Amount of Money Spent by Organisation per Launch"""

numberOfLaunch = df_data.groupby(["Organisation"]).agg({"Mission_Status":pd.Series.count})

totalPrices["Missions"] = numberOfLaunch.Mission_Status

totalPrices["MoneyPerLaunch"] = totalPrices.Price / totalPrices.Missions

totalPrices

"""# Chart the Number of Launches per Year"""

years = []
for i in df_data.Date:
  years.append(i.split(",")[1].split(" ")[1])

df_data["Year"] = years

df_data.groupby(["Year"]).agg({"Mission_Status":pd.Series.value_counts})

"""# Chart the Number of Launches Month-on-Month until the Present

Which month has seen the highest number of launches in all time? Superimpose a rolling average on the month on month time series chart. 
"""

months = []

for i in df_data.Date:
  xx_i = i.split(" ")
  xx_y = xx_i[1] +","+ xx_i[3]
  months.append(xx_y)

df_data["Months"] = months

xx = pd.DataFrame(data=df_data.Months)
xx.Months.value_counts()

"""# Launches per Month: Which months are most popular and least popular for launches?

Some months have better weather than others. Which time of year seems to be best for space missions?
"""

xx.value_counts().head()

print("It is clearly seen that, summer (July-June) and winter(December-January) are best seasons for launch a rocket")

"""# How has the Launch Price varied Over Time? 

Create a line chart that shows the average price of rocket launches over time. 
"""

df_data["Price"] = df_data["Price"].replace(",","", regex=True)
df_data["Price"] = df_data["Price"].astype(float)

x = df_data.groupby(["Year"]).agg({"Price":pd.Series.sum}).index
y = df_data.groupby(["Year"]).agg({"Price":pd.Series.sum}).values

plt.figure(figsize=(20,8))
plt.xticks(rotation=45)
fig = plt.plot(x,y)

"""# Chart the Number of Launches over Time by the Top 10 Organisations. 

How has the dominance of launches changed over time between the different players? 
"""

df_data.groupby(["Year","Organisation"]).agg({"Organisation":pd.Series.value_counts})

"""# Cold War Space Race: USA vs USSR

The cold war lasted from the start of the dataset up until 1991. 
"""

df_data["Year"] = df_data["Year"].astype(int)

USAinColdWar = df_data.loc[(df_data.CountryCodes == "USA") & ((df_data.Year>=1964) & (df_data.Year<=1991))].Rocket_Status.count()
russiaInColdWar = df_data.loc[(df_data.CountryCodes == "RUS") & ((df_data.Year>=1964) & (df_data.Year<=1991))].Rocket_Status.count()
print(f"USA launched {USAinColdWar} rockets to space in cold war, whilst Russia launched just {russiaInColdWar}")

"""## Create a Plotly Pie Chart comparing the total number of launches of the USSR and the USA

Hint: Remember to include former Soviet Republics like Kazakhstan when analysing the total number of launches. 
"""

total_USA = df_data.loc[(df_data.CountryCodes == "USA")].Rocket_Status.count()
total_russia = df_data.loc[(df_data.CountryCodes == "RUS") | (df_data.CountryCodes == "KAZ") ].Rocket_Status.count()
total_russia
total_russia

fig = px.pie(names=["USSR","USA"], values=[total_russia,total_USA])
fig.show()

"""## Create a Chart that Shows the Total Number of Launches Year-On-Year by the Two Superpowers"""

df_data.loc[(df_data.CountryCodes == "RUS") | (df_data.CountryCodes == "KAZ") | (df_data.CountryCodes == "USA") ].groupby(["Year","CountryCodes"]).agg({"CountryCodes":pd.Series.value_counts})

"""## Chart the Total Number of Mission Failures Year on Year."""

df_data.loc[(df_data.Mission_Status == "Failure") & ((df_data.CountryCodes == "RUS") | (df_data.CountryCodes == "KAZ") | (df_data.CountryCodes == "USA"))].groupby(["Year","CountryCodes"]).agg({"CountryCodes":pd.Series.value_counts})

"""# Create a Year-on-Year Chart Showing the Organisation Doing the Most Number of Launches

Which organisation was dominant in the 1970s and 1980s? Which organisation was dominant in 2018, 2019 and 2020? 
"""

df_data.loc[(df_data.Year >= 1970) & (df_data.Year <1990)].groupby(["Organisation"]).agg({"Organisation":pd.Series.value_counts})

df_data.loc[(df_data.Year >= 2018) & (df_data.Year <=2020)].groupby(["Organisation"]).agg({"Organisation":pd.Series.value_counts})